// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique @db.VarChar(16)
  password  String
  avatar    String?
  bio       String?  @db.VarChar(255)
  createdAt DateTime @default(now())

  chats         Chat[]         @relation("Member")
  ownerOf       Chat[]         @relation("Owner")
  messages      Message[]
  refreshTokens refreshToken[]
}

model Chat {
  id        String   @id @default(uuid())
  name      String?  @db.VarChar(32)
  avatar    String?
  createdAt DateTime @default(now())
  isGroup   Boolean  @default(false)
  ownerId   String?
  owner     User?    @relation("Owner", fields: [ownerId], references: [id])

  members  User[]    @relation("Member")
  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  text      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
}

model refreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  revoked   Boolean  @default(false)
}
